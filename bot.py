from aiogram import Dispatcher, executor, Bot, types
from config import TOKEN, client_id, client_secret, subdomain, redirect_url
from kbs import links_kb
from amocrm.v2 import tokens
from amocrm.v2.entity.lead import Lead
from amocrm.v2.entity.pipeline import Pipeline, Status
from pathlib import Path
import time, os, asyncio

from requests.adapters import HTTPAdapter
from amocrm.v2.interaction import _session
_session.mount("https://", HTTPAdapter(max_retries=5))

#–í—Ä–µ–º—è, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ–º –≤—ã—Å—á–∏—Ç—ã–≤–∞—Ç—å, –æ–±–Ω–æ–≤–ª—è—Ç—å deal_list –∏–ª–∏ –Ω–µ—Ç (—Ä–∞–∑ –≤  5 –º–∏–Ω = 300 —Å–µ–∫)
bot = Bot(TOKEN)
dp = Dispatcher(bot)


#–ü–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å –∏–∑ –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫
def get_deal_list():
    for i in range(3):
        try:
            #Get Auth code
            with open(r"tokens/refresh_token.txt") as f:
                auth_code = f.readline()

            #Auth
            tokens.default_token_manager(
                client_id=client_id,
                client_secret=client_secret,
                subdomain=subdomain,
                redirect_url=redirect_url,
                storage=tokens.FileTokensStorage(directory_path=os.path.join(str(Path.cwd()), "tokens")),  # by default FileTokensStorage
            )
            tokens.default_token_manager.init(code=auth_code, skip_error=True)


            #Get Deal List
            deal_list = {}
            for deal in Lead.objects.all():
                #–¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å   -    –ù–∞–∑–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏: —Å–¥–µ–ª–∫–∞
                deal_list[deal.name] = deal

            break

        except Exception as e: 
            deal_list = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µü´§" + str(e)
            continue
        


    return deal_list


first_time = time.time() 
deal_list = get_deal_list()


# /start
@dp.message_handler(commands=["start", "help"])
async def start_process(msg):
    text = "–£ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞! üåç \n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üîΩ"
    await msg.answer(text, reply_markup=links_kb)


# /tracker
@dp.message_handler(commands=["tracker"])
async def tracker_process(msg):
    text = "–í–í–ï–î–ò–¢–ï –ú–ê–†–ö–ï–† –¢–û–í–ê–†–ê üì¶"
    await msg.answer(text)




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Ä–∫–µ—Ä–∞
@dp.message_handler(content_types=["text"])
async def get_marker_process(msg):
    global deal_list, first_time

    marker = msg.text
    #–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î
    update_deal_list_interval = 900

    if len(marker) >= 5:
        second_time = time.time()

        #–ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ 600 —Å–µ–∫ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã
        if (second_time - first_time >= update_deal_list_interval):  
            first_time = second_time

            # –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤ –Ω–µ–º    GET_DEAL_LIST
            loop = asyncio.get_running_loop()
            deal_list = await loop.run_in_executor(None, get_deal_list)
        

        #–ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—É—é –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –æ—à–∏–±–æ–∫
        if str(type(deal_list)) != "<class 'str'>":
            deal_status = f"‚ö†Ô∏è–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω –º–∞—Ä–∫–µ—Ä —Ç–æ–≤–∞—Ä–∞!\n\n–í–æ–∑–º–æ–∂–Ω–æ, –≤–∞—à—É –∑–∞–ø–∏—Å—å –µ—â–µ –Ω–µ –≤–Ω–µ—Å–ª–∏ –≤ –±–∞–∑—É. \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {int(update_deal_list_interval - (second_time - first_time))} —Å–µ–∫"

            #–ò—â–µ–º —Å–¥–µ–ª–∫—É –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–π –µ—Å—Ç—å marker
            for key, value in deal_list.items():
                if key.find(marker) != -1:
                    deal_status = "üåç" + (value.status.name).upper()
                    break
        else:
            deal_status = deal_list
    else:
        deal_status = "‚ö†Ô∏è–ú–∞—Ä–∫–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ, —á–µ–º 4 —Å–∏–º–≤–æ–ª–∞!"

    await msg.answer(deal_status)





# Callback –∫–Ω–æ–ø–∫–∏ "–ú–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
@dp.callback_query_handler(text="product_location") #text - –¢–æ, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å –∫–Ω–æ–ø–∫–æ–π
async def product_location(call):
    await tracker_process(call.message)
    await call.answer()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ



if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
