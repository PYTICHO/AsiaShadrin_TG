from aiogram import Dispatcher, executor, Bot, types
from config import TOKEN, client_id, client_secret, subdomain, redirect_url
from kbs import links_kb
from amocrm.v2 import tokens
from amocrm.v2.entity.lead import Lead
from pathlib import Path
import time
import os


#–í—Ä–µ–º—è, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ–º –≤—ã—Å—á–∏—Ç—ã–≤–∞—Ç—å, –æ–±–Ω–æ–≤–ª—è—Ç—å deal_list –∏–ª–∏ –Ω–µ—Ç (—Ä–∞–∑ –≤  5 –º–∏–Ω = 300 —Å–µ–∫)
bot = Bot(TOKEN)
dp = Dispatcher(bot)


#–ü–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å –∏–∑ –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫
def get_deal_list():
    try:
        #Get Auth code
        with open(r"tokens/refresh_token.txt") as f:
            auth_code = f.readline()

        #Auth
        tokens.default_token_manager(
            client_id=client_id,
            client_secret=client_secret,
            subdomain=subdomain,
            redirect_url=redirect_url,
            storage=tokens.FileTokensStorage(directory_path=os.path.join(str(Path.cwd()), "tokens")),  # by default FileTokensStorage
        )
        tokens.default_token_manager.init(code=auth_code, skip_error=True)


        #Get Deal List
        deal_list = {}
        for deal in Lead.objects.all():
            deal_list[deal.name] = deal.price
    except: 
        deal_list = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µü´§"


    return deal_list



first_time = time.time() 
deal_list = get_deal_list()



# /start
@dp.message_handler(commands=["start", "help"])
async def start_process(msg):
    text = "–£ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞! üåç \n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üîΩ"
    await msg.answer(text, reply_markup=links_kb)


# /tracker
@dp.message_handler(commands=["tracker"])
async def tracker_process(msg):
    text = "–í–í–ï–î–ò–¢–ï –ú–ê–†–ö–ï–† –¢–û–í–ê–†–ê üì¶"
    await msg.answer(text)




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Ä–∫–µ—Ä–∞
@dp.message_handler(content_types=["text"])
async def get_marker_process(msg):
    global deal_list, first_time

    marker = msg.text
    second_time = time.time()


    #–ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ 180 —Å–µ–∫ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã
    if (second_time - first_time >= 180):  
        first_time = second_time
        deal_list = get_deal_list() #dict
    

    #–ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—É—é –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –æ—à–∏–±–æ–∫
    if str(type(deal_list)) != "<class 'str'>":
        deal_price = deal_list.get(marker, "‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω –º–∞—Ä–∫–µ—Ä —Ç–æ–≤–∞—Ä–∞! ‚ö†Ô∏è")
    else:
        deal_price = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µü´§"

    await msg.answer(deal_price)





# Callback –∫–Ω–æ–ø–∫–∏ "–ú–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
@dp.callback_query_handler(text="product_location") #text - –¢–æ, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å –∫–Ω–æ–ø–∫–æ–π
async def product_location(call):
    await tracker_process(call.message)
    await call.answer()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ



if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)